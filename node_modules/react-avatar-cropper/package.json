{
  "_args": [
    [
      {
        "raw": "react-avatar-cropper@^0.1.3",
        "scope": null,
        "escapedName": "react-avatar-cropper",
        "name": "react-avatar-cropper",
        "rawSpec": "^0.1.3",
        "spec": ">=0.1.3 <0.2.0",
        "type": "range"
      },
      "C:\\HOME\\UI materials\\React JS project\\AmeriHealthInsurance"
    ]
  ],
  "_from": "react-avatar-cropper@>=0.1.3 <0.2.0",
  "_id": "react-avatar-cropper@0.1.3",
  "_inCache": true,
  "_location": "/react-avatar-cropper",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-avatar-cropper-0.1.3.tgz_1475862137194_0.5497296664398164"
  },
  "_npmUser": {
    "name": "dropsofserenity",
    "email": "AmbientRevolution@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-avatar-cropper@^0.1.3",
    "scope": null,
    "escapedName": "react-avatar-cropper",
    "name": "react-avatar-cropper",
    "rawSpec": "^0.1.3",
    "spec": ">=0.1.3 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-avatar-cropper/-/react-avatar-cropper-0.1.3.tgz",
  "_shasum": "c74eba673ae6a9e0cbd59fca497bd648091ef774",
  "_shrinkwrap": null,
  "_spec": "react-avatar-cropper@^0.1.3",
  "_where": "C:\\HOME\\UI materials\\React JS project\\AmeriHealthInsurance",
  "author": {
    "name": "Justin Schiff"
  },
  "bugs": {
    "url": "https://github.com/DropsOfSerenity/react-avatar-cropper/issues"
  },
  "dependencies": {
    "react-bootstrap": "^0.30.2",
    "warning": "^2.1.0"
  },
  "description": "An avatar cropper meant to be a complete solution to avatar cropping.",
  "devDependencies": {
    "babel": "^5.2.17",
    "babel-core": "^5.2.17",
    "babel-loader": "^5.0.0",
    "browserify": "^10.1.3",
    "css-loader": "^0.12.1",
    "node-libs-browser": "^0.5.0",
    "react-hot-loader": "^1.2.7",
    "style-loader": "^0.12.2",
    "webpack": "^1.9.4",
    "webpack-dev-server": "^1.8.2"
  },
  "directories": {},
  "dist": {
    "shasum": "c74eba673ae6a9e0cbd59fca497bd648091ef774",
    "tarball": "https://registry.npmjs.org/react-avatar-cropper/-/react-avatar-cropper-0.1.3.tgz"
  },
  "gitHead": "6e4a81454a83ae97fda49b63687e236cd83602fc",
  "homepage": "https://github.com/DropsOfSerenity/react-avatar-cropper#readme",
  "keywords": [
    "react-component",
    "crop",
    "avatar",
    "cropper",
    "reactjs",
    "react"
  ],
  "license": "MIT",
  "main": "dist/ReactAvatarCropper.min.js",
  "maintainers": [
    {
      "name": "dropsofserenity",
      "email": "AmbientRevolution@gmail.com"
    }
  ],
  "name": "react-avatar-cropper",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.0",
    "react-dom": ">=0.14.0"
  },
  "readme": "# react-avatar-cropper\n\nReact Avatar Cropper aims to be an out of the box solution to solve the avatar cropping problem for 99% of common use cases. Most of the time you want a modal to pop up, allow the user to crop their uploaded image, and then you want to receive that base64 data to display and send to the server. React Avatar Cropper takes care of this use case.\n\nTaking heavy inspiration from slack's and facebook's user photo cropper, react-avatar-cropper is here to make it easy.\n\n\n## Demo\n\nThere is a demo on http://dropsofserenity.github.io/react-avatar-cropper/\n\n## Installation\n\nIn your project\n\n```shell\nnpm install --save react-avatar-cropper\n```\nreact-avatar-cropper also depends on react obviously :) and react-bootstrap for modal functionality. To install run the following.\n\n```shell\nnpm install --save react\nnpm install --save react-bootstrap\n```\n\n## Usage\n\nUsage is fairly simple, you can check the /example folder on github for a slightly more complex use case (the use case you see above in the demo). AvatarCropper simple takes a width and a height to determine what size avatar you would like. AvatarCropper then takes an image property where you can pass an external image, a user uploaded data URI or whatever you would like. An onRequestHide function is passed to the underlying modal so you can decide how to dismiss the modal. Lastly onCrop callback function is required, and gives you back the cropped Image, for you to do with as you wish.\n\n```js\n// require the component...\nvar AvatarCropper = require(\"react-avatar-cropper\");\n\n// and in the render function of wherever you please...\nrender: function() {\n  return (\n    <AvatarCropper\n      onRequestHide={this.handleRequestHide}\n      onCrop={this.handleCrop}\n      image={this.state.img}\n      width={400}\n      height={400}\n    />\n  );\n}\n```\n\n## Example\n\nThere is an example of this common use case on the page for this plugin.\nMost importantly we pass the cropped DataURI back through your provided\nonCrop function.\n\nCheck out http://dropsofserenity.github.io/react-avatar-cropper/ for more examples and info.\n\n## Contributing\n\nFeel free to place issues on the issue tracker or place a pull request\nregarding any functionality. I would like to keep this package limited\nto providing a great solution for the wide 99% use case that people have\nfor avatar croppers.\n\n-----------------------\n\nThanks for looking! <3\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DropsOfSerenity/react-avatar-cropper.git"
  },
  "scripts": {
    "demo": "webpack --config webpack.config.demo.js",
    "prepublish": "NODE_ENV=production ./node_modules/.bin/webpack --config webpack.config.production.js",
    "start": "webpack-dev-server --content-base example/ --hot",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.3"
}
