{
  "_args": [
    [
      {
        "raw": "loadjs@^3.3.1",
        "scope": null,
        "escapedName": "loadjs",
        "name": "loadjs",
        "rawSpec": "^3.3.1",
        "spec": ">=3.3.1 <4.0.0",
        "type": "range"
      },
      "C:\\HOME\\UI materials\\React JS project\\AmeriHealthInsurance\\node_modules\\react-google-charts"
    ]
  ],
  "_from": "loadjs@>=3.3.1 <4.0.0",
  "_id": "loadjs@3.5.0",
  "_inCache": true,
  "_location": "/loadjs",
  "_nodeVersion": "7.7.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/loadjs-3.5.0.tgz_1490697949825_0.9815477535594255"
  },
  "_npmUser": {
    "name": "muicss",
    "email": "contact@muicss.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "loadjs@^3.3.1",
    "scope": null,
    "escapedName": "loadjs",
    "name": "loadjs",
    "rawSpec": "^3.3.1",
    "spec": ">=3.3.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-google-charts"
  ],
  "_resolved": "https://registry.npmjs.org/loadjs/-/loadjs-3.5.0.tgz",
  "_shasum": "1dd8934c064c5dad9c62c513875918e87db8e6e1",
  "_shrinkwrap": null,
  "_spec": "loadjs@^3.3.1",
  "_where": "C:\\HOME\\UI materials\\React JS project\\AmeriHealthInsurance\\node_modules\\react-google-charts",
  "bugs": {
    "url": "https://github.com/muicss/loadjs/issues",
    "email": "contact@muicss.com"
  },
  "dependencies": {},
  "description": "Tiny async loader for modern browsers",
  "devDependencies": {
    "del": "2.2.2",
    "gulp": "git+https://github.com/gulpjs/gulp.git#4.0",
    "gulp-jshint": "2.0.4",
    "gulp-rename": "1.2.2",
    "gulp-uglify": "2.1.2",
    "gulp-umd": "^0.2.1",
    "jshint": "^2.9.4"
  },
  "directories": {},
  "dist": {
    "shasum": "1dd8934c064c5dad9c62c513875918e87db8e6e1",
    "tarball": "https://registry.npmjs.org/loadjs/-/loadjs-3.5.0.tgz"
  },
  "gitHead": "aed0a2094a728f2545917c1863d7283e38e73f68",
  "homepage": "https://github.com/muicss/loadjs",
  "keywords": [
    "async",
    "loader",
    "dependency manager"
  ],
  "license": "MIT",
  "main": "dist/loadjs.umd.js",
  "maintainers": [
    {
      "name": "muicss",
      "email": "contact@muicss.com"
    }
  ],
  "name": "loadjs",
  "optionalDependencies": {},
  "readme": "# LoadJS\n\n<img src=\"https://www.muicss.com/static/images/loadjs.svg\" width=\"250px\">\n\nLoadJS is a tiny async loader for modern browsers (738 bytes).\n\n[![Dependency Status](https://david-dm.org/muicss/loadjs.svg)](https://david-dm.org/muicss/loadjs)\n[![devDependency Status](https://david-dm.org/muicss/loadjs/dev-status.svg)](https://david-dm.org/muicss/loadjs#info=devDependencies)\n\n## Introduction\n\nLoadJS is a tiny async loading library for modern browsers (IE9+). It has a simple yet powerful dependency management system that lets you fetch JavaScript and CSS files in parallel and execute code after the dependencies have been met. The recommended way to use LoadJS is to include the minified source code of [loadjs.js](https://raw.githubusercontent.com/muicss/loadjs/master/dist/loadjs.min.js) in your &lt;html&gt; (possibly in the &lt;head&gt; tag) and then use the `loadjs` global to manage JavaScript dependencies after pageload.\n\nLoadJS is based on the excellent [$script](https://github.com/ded/script.js) library by [Dustin Diaz](https://github.com/ded). We kept the behavior of the library the same but we re-wrote the code from scratch to add support for success/error callbacks and to optimize the library for modern browsers. LoadJS is 738 bytes (minified + gzipped).\n\nHere's an example of what you can do with LoadJS:\n\n```javascript\n// define a dependency bundle\nloadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar');\n\n// execute code elsewhere when the bundle has loaded\nloadjs.ready('foobar', {\n  success: function() { /* foo.js & bar.js loaded */ },\n  error: function(depsNotFound) { /* foobar bundle load failed */ }\n});\n```\n\nThe latest version of LoadJS can be found in the `dist/` directory in this repository:\n * [loadjs.js](https://raw.githubusercontent.com/muicss/loadjs/master/dist/loadjs.js)\n * [loadjs.min.js](https://raw.githubusercontent.com/muicss/loadjs/master/dist/loadjs.min.js)\n\nYou can also use it as a CJS or AMD module:\n\n```bash\n$ npm install --save loadjs\n```\n\n```javascript\nvar loadjs = require('loadjs');\n\nloadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar');\n\nloadjs.ready('foobar', {\n  success: function() { /* foo.js & bar.js loaded */ },\n  error: function(depsNotFound) {/* foobar bundle load failed */}\n});\n```\n\n## Browser Support\n\n * IE9+ (`async: false` support only works in IE10+)\n * Opera 12+\n * Safari 5+\n * Chrome\n * Firefox\n * iOS 6+\n * Android 4.4+\n\nLoadJS also detects script load failures from AdBlock Plus and Ghostery in:\n\n * Safari\n * Chrome\n\nNote: LoadJS treats empty CSS files as load failures in IE (to get around lack of support for onerror events on `<link>` tags)\n\n## Documentation\n\n1. Load a single file\n\n  ```javascript\n  loadjs('/path/to/foo.js', {\n    success: function() { /* foo.js loaded */}\n  });\n  ```\n\n1. Fetch files in parallel and load them asynchronously\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], {\n    success: function() { /* foo.js & bar.js loaded */ }\n  });\n  ```\n\n1. Fetch files in parallel and load them in series\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], {\n    success: function() { /* foo.js and bar.js loaded in series */ },\n    async: false\n  });\n  ```\n\n1. Fetch JavaScript and CSS files\n\n  ```javascript\n  loadjs(['/path/to/foo.css', '/path/to/bar.js'], {\n    success: function() { /* foo.css and bar.js loaded */ }\n  });\n  ```\n\n1. Force treating file as CSS stylesheet\n\n  ```javascript\n  loadjs(['css!/path/to/cssfile.custom'], {\n    success: function() { /* cssfile.custom loaded as stylesheet */ }\n  });\n  ```\n\n1. Add a bundle id\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n    success: function() { /* foo.js & bar.js loaded */ }\n  });\n  ```\n\n1. Check if bundle has already been defined\n\n  ```javascript\n  if (!loadjs.isDefined('foobar')) {\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n      success: function() { /* foo.js & bar.js loaded */ }\n    });\n  }\n  ```\n\n1. Add an error callback\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n    success: function() { /* foo.js & bar.js loaded */ },\n    error: function(pathsNotFound) { /* at least one path didn't load */ }\n  });\n  ```\n\n1. Retry files before calling the error callback\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n    success: function() { /* foo.js & bar.js loaded */ },\n    error: function(pathsNotFound) { /* at least one path didn't load */ },\n    numRetries: 3\n  });\n  ```\n\n1. Execute a callback before script tags are embedded\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], {\n    success: function() {},\n    error: function(pathsNotFound) {},\n    before: function(path, scriptEl) {\n      /* called for each script node before being embedded */\n      if (path === '/path/to/foo.js') scriptEl.crossOrigin = true;\n    }\n  });\n  ```\n\n1. Bypass LoadJS default DOM insertion mechanism (DOM `<head>`)\n\n  ```javascript\n  loadjs(['/path/to/foo.js'], {\n    success: function() {},\n    error: function(pathsNotFound) {},\n    before: function(path, scriptEl) {\n      document.body.appendChild(scriptEl);\n      \n      /* return `false` to bypass default DOM insertion mechanism */\n      return false;\n    }\n  });\n  ```\n\n1. Execute a callback after bundle finishes loading\n\n  ```javascript\n  loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar');\n\n  loadjs.ready('foobar', {\n    success: function() { /* foo.js & bar.js loaded */ }\n  });\n  ```\n\n1. Chain .ready() together\n\n  ```javascript\n  loadjs('/path/to/foo.js', 'foo');\n  loadjs('/path/to/bar.js', 'bar');\n\n  loadjs\n    .ready('foo', {\n      success: function() { /* foo.js loaded */ }\n    })\n    .ready('bar', {\n      success: function() { /* bar.js loaded */ }\n    });\n  ```\n\n1. Compose more complex dependency lists\n\n  ```javascript\n  loadjs('/path/to/foo.js', 'foo');\n  loadjs('/path/to/bar.js', 'bar');\n  loadjs(['/path/to/thunkor.js', '/path/to/thunky.js'], 'thunk');\n\n  // wait for multiple depdendencies\n  loadjs.ready(['foo', 'bar', 'thunk'], {\n    success: function() {\n      // foo.js & bar.js & thunkor.js & thunky.js loaded\n    },\n    error: function(depsNotFound) {\n      if (depsNotFound.indexOf('foo') > -1) {};  // foo failed\n      if (depsNotFound.indexOf('bar') > -1) {};  // bar failed\n      if (depsNotFound.indexOf('thunk') > -1) {};  // thunk failed\n    }\n  });\n  ```\n  \n1. Use .done() for more control\n\n  ```javascript\n  loadjs.ready(['dependency1', 'dependency2'], {\n    success: function() {\n      // run code after dependencies have been met\n    }\n  });\n\n  function fn1() {\n    loadjs.done('dependency1');\n  }\n  \n  function fn2() {\n    loadjs.done('dependency2');\n  }\n  ```\n\n1. Reset dependency trackers\n\n\n  ```javascript\n  loadjs.reset();\n  ```\n\n## Directory structure\n\n<pre>\nloadjs/\n├── dist\n│   ├── loadjs.js\n│   ├── loadjs.min.js\n│   └── loadjs.umd.js\n├── examples\n├── gulpfile.js\n├── LICENSE.txt\n├── package.json\n├── README.md\n├── src\n│   └── loadjs.js\n├── test\n└── umd-templates\n</pre>\n\n## Development Quickstart\n\n1. Install dependencies\n\n  * [nodejs](http://nodejs.org/)\n  * [npm](https://www.npmjs.org/)\n  * http-server (via npm)\n\n1. Clone repository\n\n  ```bash\n  $ git clone git@github.com:muicss/loadjs.git\n  $ cd loadjs\n  ```\n\n1. Install node dependencies using npm\n\n  ```bash\n  $ npm install\n  ```\n\n1. Build examples\n\n  ```bash\n  $ npm run build-examples\n  ```\n\n  To view the examples you can use any static file server. To use the `nodejs` http-server module:\n\n  ```bash\n  $ npm install http-server\n  $ npm run http-server -- -p 3000\n  ```\n\n  Then visit [http://localhost:3000/examples](http://localhost:3000/examples)\n\n1. Build distribution files\n\n  ```bash\n  $ npm run build-dist\n  ```\n\n  The files will be located in the `dist` directory.\n\n1. Run tests\n\n   To run the browser tests first build the `loadjs` library:\n\n   ```bash\n   $ npm run build-tests\n   ```\n\n   Then visit [http://localhost:3000/test](http://localhost:3000/test)\n\n1. Build all files\n\n   ```bash\n   $ npm run build-all\n   ```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muicss/loadjs.git"
  },
  "scripts": {
    "build-all": "gulp build-all",
    "build-dist": "gulp build-dist",
    "build-examples": "gulp build-examples",
    "build-tests": "gulp build-tests",
    "gulp": "gulp",
    "http-server": "http-server"
  },
  "version": "3.5.0"
}
